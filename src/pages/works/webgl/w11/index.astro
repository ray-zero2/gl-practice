---
import SimpleCanvasTemplate from "../../../../common/SimpleCanvasTemplate.astro";
---

<SimpleCanvasTemplate title="first" className="js-canvas" />

<script>
  import vs from './vs.glsl?raw';
  import fs from './fs.glsl?raw';
  import { GlUtils } from './GlUtils'
  import { mat4 } from 'gl-matrix';

  const canvas = document.querySelector<HTMLCanvasElement>(".js-canvas")!;
  const gl = canvas.getContext('webgl')!;

  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.clear(gl.COLOR_BUFFER_BIT); // 規定値でクリアする

  const glUtils = new GlUtils(gl);

  const vertexShader = glUtils.createShader(vs, gl.VERTEX_SHADER);
  const fragmentShader = glUtils.createShader(fs, gl.FRAGMENT_SHADER);
  const program = glUtils.createProgram(vertexShader, fragmentShader);
  gl.useProgram(program);

  const vertices = new Float32Array([
    0.0, 1.0, 0.0,
     1.0, 0.0, 0.0,
    -1.0, 0.0, 0.0
  ]);

  const vbo = gl.createBuffer()!;
  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

  const attLocation = gl.getAttribLocation(program, 'position');
  gl.enableVertexAttribArray(attLocation);
  gl.vertexAttribPointer(attLocation, 3, gl.FLOAT, false, 0, 0);

  const uniLocation = gl.getUniformLocation(program, 'mvpMatrix');
  const m = mat4.identity(mat4.create());
  const v = mat4.identity(mat4.create());
  const p = mat4.identity(mat4.create());
  const mvpMatrix = mat4.identity(mat4.create());

  mat4.lookAt(v, [0.0, 1.0, 3.0], [0, 0, 0], [0, 1, 0]);
  mat4.perspective(p, 45, canvas.width / canvas.height, 0.1, 100);
  mat4.multiply(mvpMatrix, p, v);
  mat4.multiply(mvpMatrix, mvpMatrix, m);

  gl.uniformMatrix4fv(uniLocation, false, mvpMatrix);

  gl.drawArrays(gl.TRIANGLES, 0, 3);
</script>
